name: Process Whitelist

on:
  push:
    paths:
      - 'dist/whitelist.txt'   # 监控whitelist.txt文件的变动
  pull_request:
    paths:
      - 'dist/whitelist.txt'   # 监控PR中whitelist.txt文件的变动
  schedule:
    - cron: "0 0,6,12,18 * * *"  # 每天的 00:00、06:00、12:00 和 18:00 执行

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout 仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 下载 whitelist.txt 文件
      - name: Download whitelist.txt
        run: |
          echo "Downloading whitelist.txt from GitHub"
          curl -o dist/whitelist.txt https://raw.githubusercontent.com/wxglenovo/AdGuardHome-Filter/refs/heads/main/dist/whitelist.txt

      # 3. 安装 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 4. 处理 whitelist.txt 文件
      - name: Process whitelist.txt
        run: |
          echo "Processing whitelist.txt"
          python3 -m pip install --upgrade pip
          pip install requests

          # 创建并运行处理脚本
          echo '
import re

def get_domain_level(domain):
    """ 获取域名的层级 """
    return len(domain.split("."))

def process_domains(file_path):
    with open(file_path, "r") as f:
        domains = f.readlines()

    final_domains = []
    seen_domains = set()

    for domain in domains:
        domain = domain.strip()

        if domain in seen_domains:
            continue

        parts = domain.split(".")
        domain_level = get_domain_level(domain)

        # 查找是否有较高层级的同名父域
        is_duplicate = False
        for i in range(1, domain_level):
            parent_domain = ".".join(parts[i:])
            if parent_domain in seen_domains:
                is_duplicate = True
                break

        if not is_duplicate:
            seen_domains.add(domain)
            final_domains.append(domain)

    return final_domains

def save_to_file(domains, output_path):
    with open(output_path, "w") as f:
        for domain in domains:
            f.write(domain + "\n")

if __name__ == "__main__":
    input_file = "dist/whitelist.txt"
    output_file = "dist/processed_whitelist.txt"
    final_domains = process_domains(input_file)
    save_to_file(final_domains, output_file)

    print(f"处理完成，结果已保存至 {output_file}")
          ' > process_whitelist.py

          # 运行处理脚本
          python3 process_whitelist.py

      # 5. 提交处理后的 whitelist 文件
      - name: Commit processed whitelist.txt
        uses: EndBug/add-and-commit@v9
        with:
          author_name: 'github-actions[bot]'
          author_email: 'github-actions[bot]@users.noreply.github.com'
          message: 'Update processed whitelist.txt'
          add: 'dist/processed_whitelist.txt'

      # 6. 输出工作流运行的日志
      - name: Show completed processing message
        run: echo "Processing complete. The processed whitelist.txt has been updated."
