name: Build AdGuardHome rules

on:
  schedule:
    - cron: "0 0 * * *"
    - cron: "0 6 * * *"
    - cron: "0 12 * * *"
    - cron: "0 18 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download & Merge Rules (Clean + Deduplicate + Conflict Remove)
        id: merge
        run: |
          mkdir -p tmp dist
          mapfile -t urls < ./urls.txt
          echo "📥 开始下载规则（带重试）..."
          for url in "${urls[@]}"; do
            curl -sSL --retry 3 --fail "$url" >> tmp/all_raw.txt || echo "Failed $url"
            echo "" >> tmp/all_raw.txt
          done
          echo "✅ 下载完成，开始合并文件..."

          # 清理注释和空行
          grep -vE '^[[:space:]]*[!#]' tmp/all_raw.txt | sed '/^[[:space:]]*$/d' > tmp/all_cleaned.txt

          # 去重并生成前20项重复规则日志
          awk '
          {
              line_num=NR
              content=$0
              count[content]++
              lines[content]=lines[content] ? lines[content] "\n " line_num "行: " content : " " line_num "行: " content
              if(!seen[content]++) deduped[NR]=$0
          }
          END {
              n=0
              for(rule in count){
                  if(count[rule]>1){
                      print "规则: " rule "\n" lines[rule] "\n"
                      n++
                      if(n>=20) break
                  }
              }
              for(i in deduped){
                  print deduped[i] > "tmp/all_deduped.txt"
              }
          }
          ' tmp/all_cleaned.txt > tmp/duplicate_rules.txt

          RAW_COUNT=$(wc -l < tmp/all_cleaned.txt)
          DEDUP_COUNT=$(wc -l < tmp/all_deduped.txt)
          DUP_COUNT=$((RAW_COUNT - DEDUP_COUNT))

          # 黑白名单冲突处理
          grep '^@@||' tmp/all_deduped.txt > tmp/whitelist_tmp.txt
          grep -v '^@@||' tmp/all_deduped.txt > tmp/blocklist_tmp.txt
          sed 's/^@@||/||/' tmp/whitelist_tmp.txt > tmp/whitelist_core.txt
          grep -Fxf tmp/whitelist_core.txt tmp/blocklist_tmp.txt > tmp/conflict_core.txt
          grep -Fvxf tmp/conflict_core.txt tmp/blocklist_tmp.txt > tmp/blocklist.txt
          grep -Fvxf tmp/conflict_core.txt tmp/whitelist_tmp.txt > tmp/whitelist.txt
          CONFLICT_COUNT=$(wc -l < tmp/conflict_core.txt)

          # 生成黑白名单冲突日志（带行号）
          awk -F':' '
          FILENAME==ARGV[1] {
              split($0,a,":")
              w_line=a[1]
              w_content=a[2]
              domain=w_content
              sub(/^@@\|\|/,"",domain)
              white[domain]=w_line "行: " w_content
              next
          }
          FILENAME==ARGV[2] {
              split($0,a,":")
              b_line=a[1]
              b_content=a[2]
              domain=b_content
              sub(/^\|\|/,"",domain)
              black[domain]=b_line "行: " b_content
          }
          END {
              for(d in white){
                  if(d in black){
                      print "===== " d " 抵消规则 ====="
                      print "白名单: " white[d]
                      print "黑名单: " black[d] "\n"
                  }
              }
          }
          ' <(awk '{print NR ":" $0}' tmp/whitelist_tmp.txt) <(awk '{print NR ":" $0}' tmp/blocklist_tmp.txt) > tmp/conflict_rules.txt

          # 添加头部信息
          TIMESTAMP=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S %Z')
          WHITELIST_COUNT=$(wc -l < tmp/whitelist.txt)
          BLACKLIST_COUNT=$(wc -l < tmp/blocklist.txt)
          WHITELIST_HEADER="! =====================\n! AdGuardHome 白名单\n! 更新时间: $TIMESTAMP\n! 总条数: $WHITELIST_COUNT\n! =====================\n"
          BLACKLIST_HEADER="! =====================\n! AdGuardHome 黑名单\n! 更新时间: $TIMESTAMP\n! 总条数: $BLACKLIST_COUNT\n! =====================\n"
          echo -e "$WHITELIST_HEADER" > dist/whitelist.txt
          LC_ALL=C sort -t'.' -k2,2 -k1,1 tmp/whitelist.txt >> dist/whitelist.txt
          echo -e "$BLACKLIST_HEADER" > dist/blocklist.txt
          LC_ALL=C sort -t'.' -k2,2 -k1,1 tmp/blocklist.txt >> dist/blocklist.txt

          echo "raw_count=$RAW_COUNT" >> $GITHUB_OUTPUT
          echo "dedup_count=$DEDUP_COUNT" >> $GITHUB_OUTPUT
          echo "dup_count=$DUP_COUNT" >> $GITHUB_OUTPUT
          echo "conflict_count=$CONFLICT_COUNT" >> $GITHUB_OUTPUT

      - name: Commit Changes
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          RAW_COUNT=${{ steps.merge.outputs.raw_count }}
          DEDUP_COUNT=${{ steps.merge.outputs.dedup_count }}
          DUP_COUNT=${{ steps.merge.outputs.dup_count }}
          CONFLICT_COUNT=${{ steps.merge.outputs.conflict_count }}

          NEW_ADDED=$((DEDUP_COUNT - RAW_COUNT + CONFLICT_COUNT))
          [ $NEW_ADDED -lt 0 ] && NEW_ADDED=0

          COMMIT_MSG="🧩 更新 AdGuardHome 规则 | 总数: ${DEDUP_COUNT} | 新增: ${NEW_ADDED} | 去重: ${DUP_COUNT} | 抵消: ${CONFLICT_COUNT}"

          git add dist/whitelist.txt dist/blocklist.txt dist/old_rules.txt
          if git diff --cached --quiet; then
            echo "no_change=true" >> $GITHUB_OUTPUT
            echo "No new rules to commit"
          else
            echo "no_change=false" >> $GITHUB_OUTPUT
            git commit -m "$COMMIT_MSG"
            git pull --rebase origin main || true
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Release
        if: steps.commit.outputs.no_change == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ github.run_number }}"
          name: "🧩 AdGuardHome Rules"
          body: |
            ${{ steps.commit.outputs.commit_message }}
          files: |
            dist/whitelist.txt
            dist/blocklist.txt

      - name: Show Result
        run: |
          echo "================= ✅ 合并完成 ================="
          echo "📊 重复规则前 20 条（含行号）:"
          cat tmp/duplicate_rules.txt
          echo "📊 黑白名单冲突抵消规则内容（含行号，白名单和黑名单同一域名小节）:"
          cat tmp/conflict_rules.txt
          echo "📁 白名单文件路径：dist/whitelist.txt"
          echo "📊 白名单总行数：$(wc -l < dist/whitelist.txt)"
          echo "📁 黑名单文件路径：dist/blocklist.txt"
          echo "📊 黑名单总行数：$(wc -l < dist/blocklist.txt)"
          echo "============================================================"
